---
description: blog post, mdx files, baza wiedzy, knowledge-base, posts
globs: 
alwaysApply: false
---
# Blog and Knowledge Base Guide
Generated: 2025-04-23

This document provides guidelines for creating and managing blog posts and knowledge base articles in the project.

## Content Structure

The project uses two main content types:
1. **Blog Posts** - Individual articles stored as MDX files
2. **Knowledge Base Articles** - Educational content accessible through the knowledge base section

## File Organization

### Blog Posts

Blog posts are stored as MDX files in the `src/content/blog/` directory, organized by language:

```
src/content/blog/
├── en/
│   └── example-post-using-all-components.mdx
├── pl/
│   └── przyklad-wpisu-wykorzystujacego-wszystkie-komponenty.mdx
```

### Knowledge Base

Knowledge base articles are served through the dynamic routes:
- Polish: `/baza-wiedzy/[slug]`
- English: `/knowledge-base/[slug]`

The routes are configured in `src/i18n/routing.ts`.

## Creating New Content

### New Blog Post

To create a new blog post:

1. Create an MDX file in both language directories:
   - English: `src/content/blog/en/your-new-post-slug.mdx`
   - Polish: `src/content/blog/pl/twoj-nowy-post-slug.mdx`

2. Add the frontmatter with required metadata:

```mdx
---
title: "Your Post Title"
description: "A brief description of your post for SEO and previews"
date: "2025-04-23"
author: "Your Name"
coverImage: "/images/your-cover-image.webp"
tags: ["tag1", "tag2"]
---

Your content goes here...
```

3. Update the routing configuration in `src/i18n/routing.ts`:

```typescript
pathnames: {
  // ... existing paths
  'your-new-post-slug': {
    pl: 'twoj-nowy-post-slug',
    en: 'your-new-post-slug'
  }
}
```

### New Knowledge Base Article

To create a new knowledge base article:

1. Prepare the content for both languages
2. Update the data source that feeds the knowledge base routes
3. Ensure proper linking in the knowledge base index page

## MDX Components

The MDX files support all standard Markdown syntax plus custom React components that can be imported and used directly in the content.

### Available Components

- `<Image />` - Enhanced image component with lazy loading and optimization
- `<CodeBlock />` - Syntax-highlighted code blocks
- `<Alert />` - Styled alert boxes for important information
- `<Callout />` - Callout boxes for highlighting specific content
- `<TableOfContents />` - Automatically generated table of contents

### Example Usage

```mdx
---
title: "Example Post Using All Components"
description: "This post demonstrates all available components"
date: "2025-04-20"
---

<TableOfContents />

## Introduction

This is a regular paragraph.

<Alert type="info">
  This is an information alert that stands out in the content.
</Alert>

<CodeBlock language="typescript">
const greeting = 'Hello World';
console.log(greeting);
</CodeBlock>
```

## Internationalization

### Translation Requirements

All content should be available in both Polish (primary language) and English. This includes:
- Post title and metadata
- Main content body
- Image alt text
- Custom component text

### URL Structure

The URL structure differs between languages:
- Polish URLs use the default format without locale prefix (e.g., `/baza-wiedzy/artykul`)
- English URLs use the locale prefix (e.g., `/en/knowledge-base/article`)

This is configured in the `localePrefix: 'as-needed'` setting in the routing configuration.

## SEO Best Practices

For optimal SEO, ensure all content includes:

1. **Descriptive Titles** - Clear, keyword-rich titles under 60 characters
2. **Meta Descriptions** - Compelling descriptions under 160 characters
3. **Alt Text** - Descriptive alt text for all images
4. **Heading Structure** - Proper H1-H6 hierarchy
5. **Internal Linking** - Links to related content
6. **URL Structure** - Clean, descriptive URLs
7. **Canonical URLs** - Proper cross-references between language versions

## Content Guidelines

### Blog Posts

- Focus on valuable, educational content
- Use a conversational, professional tone
- Include practical examples and code snippets where relevant
- Break content into logical sections with clear headings
- Include a call-to-action at the end

### Knowledge Base Articles

- Provide clear, concise information
- Use a more direct, instructional tone
- Structure content as a step-by-step guide where appropriate
- Include troubleshooting sections for common issues
- Link to related knowledge base articles

## Media Guidelines

- Use WebP format for images when possible
- Optimize all images before uploading
- Keep image file sizes under 200KB when possible
- Include descriptive alt text for accessibility and SEO
- Store images in the `public/images/` directory

## Best Practices

1. **Create Content in Both Languages** - Always create parallel content for both Polish and English
2. **Update Routing Configuration** - Always update `routing.ts` when adding new content
3. **Test Both Language Versions** - Verify that content displays correctly in both languages
4. **Monitor Performance** - Use Analytics to track content performance
5. **Update Existing Content** - Regularly review and update existing content for accuracy

